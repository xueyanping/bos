package com.yado.bos.web.action;


import java.io.IOException;
import java.util.List;

import javax.servlet.ServletOutputStream;

import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.struts2.ServletActionContext;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.yado.bos.entity.Region;
import com.yado.bos.entity.Subarea;
import com.yado.bos.service.ISubareaService;
import com.yado.bos.utils.FileUtils;

@Controller
@Scope("prototype")
public class SubareaAction extends BaseAction<Subarea>{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	@Autowired
	private ISubareaService subareaService;
	
	public String add() {
		subareaService.save(model);
		return LIST;
	}
	
	/*
	 * 按条件分页查询
	 */
	public String pageQuery() {
		DetachedCriteria detachedCriteria = pageBean.getDetachedCriteria();
		//
		String addresskey = model.getAddresskey();
		if(StringUtils.isNoneBlank(addresskey)) {
			detachedCriteria.add(Restrictions.like("addresskey", "%"+addresskey+"%"));
		}
		
		Region region = model.getRegion();
		
		if(region != null) {
			String province = region.getProvince();
			String city = region.getCity();
			String district = region.getDistrict();
			detachedCriteria.createAlias("region", "r");
			if(StringUtils.isNoneBlank(province)) {
				//通过多表的关联查询
				//agrs1 关联表的属性名称
				//args2 别名名称（随意）				
				detachedCriteria.add(Restrictions.like("r.province", "%"+province+"%"));
			}
			
			if(StringUtils.isNoneBlank(city)) {
				//通过多表的关联查询
				//agrs1 关联表的属性名称
				//args2 别名名称（随意）				
				detachedCriteria.add(Restrictions.like("r.city", "%"+city+"%"));
			}
			
			if(StringUtils.isNoneBlank(district)) {
				//通过多表的关联查询
				//agrs1 关联表的属性名称
				//args2 别名名称（随意）				
				detachedCriteria.add(Restrictions.like("r.district", "%"+district+"%"));
			}
			
		}
		
		 subareaService.pageQuery(pageBean);
		 java2Json(pageBean, new String[] {"currentPage","detachedCriteria","pageSize","subareas","decidezone"});
		 return NONE;
	}	
	
	
	/**
	 * 导出区域信息为excel表格
	 */
	public String eportXls() {
		//1、查询所有数据
		List<Subarea> list = subareaService.findAll();
		//创建一个标签页
		HSSFWorkbook workbook = new HSSFWorkbook();
		HSSFSheet sheet = workbook.createSheet("分区数据");
		//创建一标题行
		HSSFRow headRow = sheet.createRow(0);
		headRow.createCell(0).setCellValue("分区编号");
		headRow.createCell(1).setCellValue("开始编号");
		headRow.createCell(2).setCellValue("结束编号");
		headRow.createCell(3).setCellValue("位置信息");
		headRow.createCell(4).setCellValue("省市区");
		for (Subarea subarea : list) {
			HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum()+1);
			dataRow.createCell(0).setCellValue(subarea.getId());
			dataRow.createCell(1).setCellValue(subarea.getStartnum());
			dataRow.createCell(2).setCellValue(subarea.getEndnum());
			dataRow.createCell(3).setCellValue(subarea.getAddresskey());
			dataRow.createCell(4).setCellValue(subarea.getRegion().getName());
		}
		
		//文件下载
		ServletOutputStream out;
		String fileName = "分区数据.xls";
		try {
			String contentType = ServletActionContext.getServletContext().getMimeType(fileName);
			out = ServletActionContext.getResponse().getOutputStream();			
			ServletActionContext.getResponse().setContentType(contentType);
			//获取客户端浏览器类型
			String useragent = ServletActionContext.getRequest().getHeader("User-Agent");
			fileName = FileUtils.encodeDownloadFilename(fileName,useragent );
			ServletActionContext.getResponse().setHeader("content-disposition", "attachment;filename="+fileName);
			workbook.write(out);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		
		
		return NONE;
	}

}
