<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xmlns:soap="http://cxf.apache.org/bindings/soap"

	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd
						http://cxf.apache.org/bindings/soap 
						http://cxf.apache.org/schemas/configuration/soap.xsd
						http://cxf.apache.org/jaxws 
						http://cxf.apache.org/schemas/jaxws.xsd">

	<!-- 扫描/加载属性文件 -->
	<context:property-placeholder
		location="classpath:db.properties" />

	<!-- 配置数据源 -->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}" />
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- 配置LocalSessionFactoryBean，spring提供的用于整合hibernate的工厂bean -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 注入hibernate相关的属性配置 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
		<!-- 注入hibernate的映射文件 -->
		<property name="mappingLocations">
			<list>
				<value>classpath:com/yado/bos/entity/*.xml</value>
			</list>
		</property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 注册安全管理器对象 -->
	<bean id="securityManager"
		class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="bosRealm" />
		<!-- 注入缓存管理器 -->
		<property name="cacheManager" ref="cacheManager"/>
	</bean>

	<!-- 配置shiro过滤器工厂对象 -->
	<bean id="shiroFilter"
		class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 注入安全管理对象 -->
		<property name="securityManager" ref="securityManager"></property>
		<!-- 注入相关页面访问URL -->
		<property name="loginUrl" value="/login.jsp"></property>
		<property name="successUrl" value="/index.jsp"></property>
		<property name="unauthorizedUrl" value="/unauthorized.jsp"></property>
		<!--注入URL的拦截规则 起到过滤器的作用 -->
		<property name="filterChainDefinitions">
			<value>
				/css/** = anon
				/js/** = anon
				/images/** = anon
				/validatecode.jsp* = anon
				/login.jsp = anon
				/userAction_login.action = anon
				<!-- /page_base_staff.action = perms["staff-list"] -->
				/* = authc
			</value>
		</property>
	</bean>

	<!-- 注册Realm -->
	<bean id="bosRealm" class="com.yado.bos.realm.BosRealm"></bean>
	<!-- 注解扫描 文件路径（<context:component-scan>除了具有<context:annotation-config />的功能之外，还具有自动将带有@component,@service,@Repository等注解的对象注册到spring容器中的功能） -->
	<context:component-scan
		base-package="com.yado.bos" />

	<!-- 用于激活那些已经在spring容器里注册过的bean（无论是通过xml的方式还是通过package sanning的方式）上面的注解 -->
	<context:annotation-config />

	<!--支持事务注解（@Transactional） -->
	<tx:annotation-driven />

	<!-- 注册crm客户端代理对象 -->
	<jaxws:client id="crmClient"
		serviceClass="com.yado.cxf.ICustomerService"
		address="http://localhost:8080/cxf_crm/service/crmService"></jaxws:client>
	<!-- 开启shiro注解支持 -->
	<bean id="defaultAdvisorAutoProxyCreator"
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
		<!-- 必须使用cglib方式为Action对象创建代理对象 如果value设置为 false则会受用jdk代理 jdk代理针对接口 例如action中实现了，ModleDriven -->
		<!-- 设置为true则使用cglib方式 基于继承 -->
		<property name="proxyTargetClass" value="true"></property>
	</bean>
	<!-- 配置shiro框架提供的切面类，用于创建 代理对象 -->
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	</bean>

	<!-- 注册缓存管理器 -->
	<bean id="cacheManager"
		class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<!-- 注入ehcache的配置文件 -->
		<property name="cacheManagerConfigFile"
			value="classpath:ehcache.xml" />
	</bean>
	
	<!-- 注册自定义作业类 -->
	<!-- <bean id="myJob" class="com.yado.bos.jobs.MailJob">
		<property name="username" value="itcast_server@126.com"/>
		<property name="password" value="147963qP"/>
		<property name="smtpServer" value="smtp.126.com"/>
	</bean>

	<bean id="jobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		注入目标类
		<property name="targetObject" ref="myJob"></property>
		注入目标方法
		<property name="targetMethod" value="execute"></property>
	</bean>

	定义触发器
	<bean id="myTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		注入任务详情对象
		<property name="jobDetail" ref="jobDetail"/>
		<property name="cronExpression">
		注入cron表达式，通过这个表达式指定触发的时间点
			每5秒触发一次
			<value>0/5 * * * * ?</value>
		</property>
	</bean>
	
	配置调度工场
	<bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		注入触发器
		<property name="triggers">
			<list>
				<ref bean="myTrigger"/>
			</list>
		</property>
	</bean> -->

</beans>
